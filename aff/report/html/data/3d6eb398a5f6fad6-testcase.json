{
  "uid" : "3d6eb398a5f6fad6",
  "name" : "TestLogin.test_login[case_data2]",
  "title" : "Test login [case_data2]",
  "time" : {
    "start" : 1559553556912,
    "stop" : 1559553556961,
    "duration" : 49
  },
  "summary" : {
    "attachments" : 0,
    "steps" : 0
  },
  "failure" : {
    "message" : "Exception: 用例关联的参数文件有误\n文件路径： login.json",
    "stackTrace" : "test_name = 'password正确', param = 'login.json'\nrelevance = {'auth': 'admin', 'email': 'wangjuan@user.com', 'password': '123456'}\n_path = '/Users/wangjuan/workpace/Aff_service/pages/login'\nresult = {'result': False}\n\n    def read_param(test_name, param, relevance, _path, result):\n        \"\"\"\n        读取用例中参数parameter\n        :param test_name: 用例名称\n        :param param: parameter\n        :param relevance: 关联对象\n        :param _path: case路径\n        :param result: 全局结果\n        :return:\n        \"\"\"\n    \n        if isinstance(param, dict):\n            param = replace(param, relevance)\n        elif isinstance(param, list):\n            param = replace(param, relevance)\n        else:\n            try:\n                with open(_path + \"/\" + param, \"r\", encoding=\"utf-8\") as f:\n>                   data = json.load(f)\n\ncommon/read_param.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfp = <_io.TextIOWrapper name='/Users/wangjuan/workpace/Aff_service/pages/login/login.json' mode='r' encoding='utf-8'>\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def load(fp, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n        a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        \"\"\"\n        return loads(fp.read(),\n            cls=cls, object_hook=object_hook,\n            parse_float=parse_float, parse_int=parse_int,\n>           parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/__init__.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '[\\n  {\\n    \"test_name\": \"password为空\",\\n    \"parameter\": {\\n      \"email\": \"${email}$\",\\n\\t  \"password\": \"\",\\n\\t  \"au...,\\n    \"parameter\": {\\n      \"email\": \"${email}$\",\\n\\t  \"password\": \"123456\",\\n\\t  \"auth\": \"${auth}$\"\\n    }\\n  }\\n]\\n'\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str`` instance containing a JSON\n        document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n    \n        \"\"\"\n        if not isinstance(s, str):\n            raise TypeError('the JSON object must be str, not {!r}'.format(\n                                s.__class__.__name__))\n        if s.startswith(u'\\ufeff'):\n            raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                  s, 0)\n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/__init__.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x104d41978>\ns = '[\\n  {\\n    \"test_name\": \"password为空\",\\n    \"parameter\": {\\n      \"email\": \"${email}$\",\\n\\t  \"password\": \"\",\\n\\t  \"au...,\\n    \"parameter\": {\\n      \"email\": \"${email}$\",\\n\\t  \"password\": \"123456\",\\n\\t  \"auth\": \"${auth}$\"\\n    }\\n  }\\n]\\n'\n_w = <built-in method match of _sre.SRE_Pattern object at 0x104d470f0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/decoder.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x104d41978>\ns = '[\\n  {\\n    \"test_name\": \"password为空\",\\n    \"parameter\": {\\n      \"email\": \"${email}$\",\\n\\t  \"password\": \"\",\\n\\t  \"au...,\\n    \"parameter\": {\\n      \"email\": \"${email}$\",\\n\\t  \"password\": \"123456\",\\n\\t  \"auth\": \"${auth}$\"\\n    }\\n  }\\n]\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 10 column 1 (char 136)\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/decoder.py:357: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.TestLogin object at 0x10f444780>\ncase_data = {'address': '/postLogin', 'check': [{'check_type': 'entirely_check', 'expected_code': 200, 'expected_request': 'result.json'}], 'file': False, 'headers': {}, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"登录\")\n    # @allure.issue(\"http://www.baidu.com\")  # bug地址\n    # @allure.testcase(\"http://www.testlink.com\")  # 用例连接地址\n    # @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_login(self, case_data):\n        \"\"\"\n        登录用例\n        :param case_data:\n        :return:\n        \"\"\"\n        print(case_dict[\"test_case\"])\n        # 参数化修改test_add_project 注释\n        for k, v in enumerate(case_dict[\"test_case\"]):  # 遍历用例文件中所有用例的索引和值\n            try:\n                if case_data == v:\n                    # 修改方法的__doc__在下一次调用时生效，此为展示在报告中的用例描述\n                    TestLogin.test_login.__doc__ = case_dict[\"test_case\"][k + 1][\"info\"]\n            except IndexError:\n                pass\n        # 发送测试请求\n>       api_send_check(case_data, case_dict, self.relevance, self.rel, PATH, self.result)\n\ntestcase/test_login.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommon/check_response.py:24: in api_send_check\n    project_dict[\"testinfo\"].get(\"address\"), relevance, _path, result)\ncommon/send_resquest.py:28: in send_request\n    parameter = read_param.read_param(data[\"test_name\"], data[\"parameter\"], relevance, _path, success)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'password正确', param = 'login.json'\nrelevance = {'auth': 'admin', 'email': 'wangjuan@user.com', 'password': '123456'}\n_path = '/Users/wangjuan/workpace/Aff_service/pages/login'\nresult = {'result': False}\n\n    def read_param(test_name, param, relevance, _path, result):\n        \"\"\"\n        读取用例中参数parameter\n        :param test_name: 用例名称\n        :param param: parameter\n        :param relevance: 关联对象\n        :param _path: case路径\n        :param result: 全局结果\n        :return:\n        \"\"\"\n    \n        if isinstance(param, dict):\n            param = replace(param, relevance)\n        elif isinstance(param, list):\n            param = replace(param, relevance)\n        else:\n            try:\n                with open(_path + \"/\" + param, \"r\", encoding=\"utf-8\") as f:\n                    data = json.load(f)\n                    for i in data:\n                        if i[\"test_name\"] == test_name:\n                            param = i[\"parameter\"]\n                            break\n                    if not isinstance(param, dict):\n                        result[\"result\"] = False\n                        raise Exception(\"未能找到用例关联的参数\\n文件路径：%s\\n索引：%s\" %(param, _path))\n                    else:\n                        param = replace(param, relevance)\n            except FileNotFoundError:\n                result[\"result\"] = False\n                raise Exception(\"用例关联文件不存在\\n文件路径： %s\" % param)\n            except JSONDecodeError:\n                result[\"result\"] = False\n>               raise Exception(\"用例关联的参数文件有误\\n文件路径： %s\" % param)\nE               Exception: 用例关联的参数文件有误\nE               文件路径： login.json\n\ncommon/read_param.py:45: Exception"
  },
  "description" : {
    "value" : "password正确",
    "type" : "TEXT"
  },
  "severity" : "NORMAL",
  "status" : "FAILED",
  "testId" : null,
  "suite" : {
    "uid" : "e171b96099dab8bd",
    "name" : "test_login",
    "title" : "Test login"
  },
  "steps" : [ ],
  "attachments" : [ ],
  "issues" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "用户登录场景"
  }, {
    "name" : "suite-name",
    "value" : "test_login"
  }, {
    "name" : "story",
    "value" : "登录"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "suite-title",
    "value" : null
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "host",
    "value" : "xiaoxideMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "23564-MainThread"
  }, {
    "name" : "language",
    "value" : "cpython3"
  } ],
  "parameters" : [ ]
}